// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vietqtran.DataAccess.Data;

#nullable disable

namespace vietqtran.DataLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("User_Claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User_Logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("User_Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User_Tokens", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.AccessToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .HasDatabaseName("Index_AccessToken_Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Access_Tokens", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.HighLight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreviewImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HighLights");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Content")
                        .IsUnique()
                        .HasDatabaseName("Index_Message_Content");

                    b.HasIndex("CreatedAt")
                        .IsUnique()
                        .HasDatabaseName("Index_Message_CreatedAt");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("Index_Message_Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplyId")
                        .IsUnique()
                        .HasDatabaseName("Index_Message_ReplyId");

                    b.HasIndex("StoryId")
                        .IsUnique()
                        .HasDatabaseName("Index_Message_StoryId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("Index_Message_Sender");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.PersonalLink", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id", "UserId", "Link");

                    b.HasIndex("Id")
                        .HasDatabaseName("Index_PersonalLink_Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("Index_PersonalLink_UserId");

                    b.ToTable("Personal_Links", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasDatabaseName("Index_Post_Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("Index_Post_UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .HasDatabaseName("Index_RefreshToken_Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Refresh_Tokens", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Relations.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlockerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlockedId")
                        .HasDatabaseName("Index_Follow_BlockedId");

                    b.HasIndex("BlockerId")
                        .HasDatabaseName("Index_Follow_BlockerId");

                    b.ToTable("User_Blocks", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Relations.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId")
                        .HasDatabaseName("Index_Follow_FollowedId");

                    b.HasIndex("FollowerId")
                        .HasDatabaseName("Index_Follow_FollowerId");

                    b.ToTable("User_Follows", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Relations.ReactMessage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("React")
                        .HasColumnType("int");

                    b.HasKey("UserId", "MessageId", "Id");

                    b.HasIndex("MessageId", "UserId")
                        .HasDatabaseName("Index_ReactMessage_MessageId_UserId");

                    b.ToTable("Reacts_Message", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("Index_Role_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eab2e07f-5973-44e0-835d-b40f4f72ecf3"),
                            ConcurrencyStamp = "95973d66-ba40-4086-8924-38c6895a2bef",
                            Description = "Role for ADMIN",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("0edc50dc-163d-4a8a-8314-a8bc3ad92940"),
                            ConcurrencyStamp = "dd334041-66d8-4dec-8a45-0e413ecc7947",
                            Description = "Role for USER",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HighLightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("ViewQuantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("Index_PersonalLink_CreatedAt");

                    b.HasIndex("HighLightId");

                    b.HasIndex("Id")
                        .HasDatabaseName("Index_Story_Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("Index_Story_UserId");

                    b.ToTable("Stories", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 11, 8, 7, 19, 10, 494, DateTimeKind.Utc).AddTicks(7143));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivateAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastOfflineTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastOnlineTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("Index_User_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("Index_User_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("Index_User_IsActive");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("Index_User_PhoneNumber")
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("Index_User_RoleId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("Index_User_UserName");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("vietqtran.Models.Entities.AccessToken", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithOne("AccessToken")
                        .HasForeignKey("vietqtran.Models.Entities.AccessToken", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.HighLight", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithMany("HighLights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Message", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.Post", "Post")
                        .WithMany("Messages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vietqtran.Models.Entities.Story", "Story")
                        .WithMany("Messages")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.PersonalLink", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithMany("PersonalLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Post", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("vietqtran.Models.Entities.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Relations.Block", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "Blocked")
                        .WithMany("Blockeds")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vietqtran.Models.Entities.User", "Blocker")
                        .WithMany("Blockers")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Relations.Follow", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.User", "Followed")
                        .WithMany("Followeds")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vietqtran.Models.Entities.User", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Relations.ReactMessage", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.Message", "Message")
                        .WithMany("MessageReacts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithMany("MessageReacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Story", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.HighLight", "HighLight")
                        .WithMany("Stories")
                        .HasForeignKey("HighLightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vietqtran.Models.Entities.User", "User")
                        .WithMany("Stories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HighLight");

                    b.Navigation("User");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.User", b =>
                {
                    b.HasOne("vietqtran.Models.Entities.Role", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.HighLight", b =>
                {
                    b.Navigation("Stories");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Message", b =>
                {
                    b.Navigation("MessageReacts");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Post", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.Story", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("vietqtran.Models.Entities.User", b =>
                {
                    b.Navigation("AccessToken")
                        .IsRequired();

                    b.Navigation("Blockeds");

                    b.Navigation("Blockers");

                    b.Navigation("Followeds");

                    b.Navigation("Followers");

                    b.Navigation("HighLights");

                    b.Navigation("MessageReacts");

                    b.Navigation("Messages");

                    b.Navigation("PersonalLinks");

                    b.Navigation("Posts");

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("Stories");
                });
#pragma warning restore 612, 618
        }
    }
}
